import {
  arbitrum,
  base,
  bsc,
  mainnet,
  polygon,
  tron,
} from '@reown/appkit/networks';
import { createAppKit } from '@reown/appkit/react';
import { WagmiAdapter } from '@reown/appkit-adapter-wagmi';
import { QueryClient, QueryClientProvider } from '@tanstack/react-query';
import type { ReactNode } from 'react';
import type { Chain } from 'viem';
import {
  type Config,
  cookieStorage,
  createStorage,
  WagmiProvider,
} from 'wagmi';

// Read Project ID from environment variables
const projectId = '6b9a38a20eeabce212823e1655d4495d';

// Define supported networks, explicitly typed as a non-empty array of Chains
const networks: [Chain, ...Chain[]] = [
  mainnet,
  arbitrum,
  base,
  polygon,
  bsc,
  tron,
];

// Create the Wagmi adapter instance
const wagmiAdapter = new WagmiAdapter({
  storage: createStorage({ storage: cookieStorage }),
  ssr: false,
  projectId,
  networks,
});

// Export the Wagmi config generated by the adapter
const config = wagmiAdapter.wagmiConfig;

const queryClient = new QueryClient();

const metadata = {
  name: 'Nuwa Client',
  description: 'Nuwa AI Client Application',
  url:
    typeof window !== 'undefined' ? window.location.origin : 'https://nuwa.ai',
  icons: ['https://nuwa.ai/favicon.ico'],
};

createAppKit({
  adapters: [wagmiAdapter],
  projectId: projectId,
  networks: networks,
  defaultNetwork: mainnet,
  metadata,
  features: { analytics: true },
});

export default function AppkitContextProvider({
  children,
}: {
  children: ReactNode;
}) {
  return (
    <WagmiProvider config={config as Config}>
      <QueryClientProvider client={queryClient}>{children}</QueryClientProvider>
    </WagmiProvider>
  );
}
